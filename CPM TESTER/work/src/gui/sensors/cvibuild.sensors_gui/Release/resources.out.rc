#include "C:\Program Files (x86)\National Instruments\Shared\MSDTRedistributables\SDKHeaderFiles\8.1\winver.h"


2 24 "c:\\work\\src\\gui\\sensors\\cvibuild.sensors_gui\\Release\\manifest.xml"


STRINGTABLE DISCARDABLE
BEGIN
  65535  ""
END

VS_VERSION_INFO VERSIONINFO
 FILEVERSION 1,0,0,0
 PRODUCTVERSION 1,0,0,0
 FILEFLAGSMASK VS_FFI_FILEFLAGSMASK
 FILEFLAGS 0L
 FILEOS VOS__WINDOWS32
 FILETYPE VFT_DLL
 FILESUBTYPE VFT_UNKNOWN
BEGIN
    BLOCK "StringFileInfo"
    BEGIN
        BLOCK "040904b0"
        BEGIN
            VALUE "CompanyName", "\0"
            VALUE "FileDescription", "sensors_gui (Release x86)\0"
            VALUE "FileVersion", "1.0\0"
            VALUE "InternalName", "sensors_gui\0"
            VALUE "LegalCopyright", "Copyright ©  2020\0"
            VALUE "OriginalFilename", "sensors_gui.dll\0"
            VALUE "ProductName", " sensors_gui\0"
            VALUE "ProductVersion", "1.0\0"
        END
    END
    BLOCK "VarFileInfo"
    BEGIN
        VALUE "Translation", 0x409, 0x4b0
    END
END

sensors:gui.uir UIRFileType "c:\\work\\src\\gui\\sensors\\sensors_gui.uir"

CVIDLLexports CVIDLLprototypes
{
   "long BKLib2_New_DBKGrid(int panel, const char *label, int top, int left, int *controlID, int *UILError);"
   "\n",
   "long BKLib2_New_DBKTree(int panel, const char *label, int top, int left, int *controlID, int *UILError);"
   "\n",
   "long BKLib2_Open_DBKGrid(const char *fileName, int panel, const char *label, int top, int left, int *controlID, int *UILError);"
   "\n",
   "long BKLib2_Open_DBKTree(const char *fileName, int panel, const char *label, int top, int left, int *controlID, int *UILError);"
   "\n",
   "long BKLib2__DBKGridAboutBox(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long BKLib2__DBKGridRefresh(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long BKLib2__DBKTreeAboutBox(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long BKLib2__DBKTreeAddColumn(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyCol, const char *name, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeAddNode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyParent, const char *keyNode, const char *text, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeCollapse(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeEnsureVisible(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode);"
   "\n",
   "long BKLib2__DBKTreeEventsRegOnCollapse(CAObjHandle serverObject, long (*callbackFunction)(int, void *, char *), void *callbackData, int enableCallbacks, int *callbackId);"
   "\n",
   "long BKLib2__DBKTreeEventsRegOnDragDrop(CAObjHandle serverObject, long (*callbackFunction)(int, void *, char *, short), void *callbackData, int enableCallbacks, int *callbackId);"
   "\n",
   "long BKLib2__DBKTreeEventsRegOnDragOver(CAObjHandle serverObject, long (*callbackFunction)(int, void *, char *, short, short), void *callbackData, int enableCallbacks, int *callbackId);"
   "\n",
   "long BKLib2__DBKTreeEventsRegOnExpand(CAObjHandle serverObject, long (*callbackFunction)(int, void *, char *), void *callbackData, int enableCallbacks, int *callbackId);"
   "\n",
   "long BKLib2__DBKTreeEventsRegOnModify(CAObjHandle serverObject, long (*callbackFunction)(int, void *, char *, char *, long), void *callbackData, int enableCallbacks, int *callbackId);"
   "\n",
   "long BKLib2__DBKTreeEventsRegOnMouseOverCell(CAObjHandle serverObject, long (*callbackFunction)(int, void *, char *, char *), void *callbackData, int enableCallbacks, int *callbackId);"
   "\n",
   "long BKLib2__DBKTreeEventsRegOnNodeClick(CAObjHandle serverObject, long (*callbackFunction)(int, void *, char *), void *callbackData, int enableCallbacks, int *callbackId);"
   "\n",
   "long BKLib2__DBKTreeEventsRegOnPopupMenuCommand(CAObjHandle serverObject, long (*callbackFunction)(int, void *, char *, char *, long), void *callbackData, int enableCallbacks, int *callbackId);"
   "\n",
   "long BKLib2__DBKTreeEventsRegOnPrePopupMenuCallback(CAObjHandle serverObject, long (*callbackFunction)(int, void *, char *, char *, char **), void *callbackData, int enableCallbacks, int *callbackId);"
   "\n",
   "long BKLib2__DBKTreeExpand(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeExpandLevel(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long nLevel, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeFromArray(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT *vArray, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeFromString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *strString, const char *chSeparator, const char *chLine, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeFromXML(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *strXML, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetAutoImages(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetBackColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetBackTextColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetColumnCount(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetColumnHeadFontStyle(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyCol, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetColumnHeadFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyCol, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetColumnHeadingVisible(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetColumnName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyCol, char **returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetColumnNext(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyCol, char **returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetColumnResizing(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetColumnWidth(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyCol, long *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetDragIcon(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetDragMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetEditable(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetEnableDragAndDrop(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetEnableEventModify(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetEnableEventMouseOverCell(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetEnableFocusCell(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetEnableSelection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetEnableTreeKeyDirection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetFont(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetForeTextColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetFrameBorder(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long *pStyle, long *pStyleEx);"
   "\n",
   "long BKLib2__DBKTreeGetGridLineColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetGridLines(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetImageList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetListMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetNodeData(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, long *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetNodeFontStyle(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetNodeHasChildren(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetNodeItemBackColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, unsigned long *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetNodeItemData(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, long *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetNodeItemEditable(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetNodeItemFontStyle(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetNodeItemFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetNodeItemImage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetNodeItemText(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, char **returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetNodeItemTextColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, unsigned long *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetNodeItemTextEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, char **returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetNodeItemTipTextEnable(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetNodeNext(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, short position, char **returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetParentNode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, char **returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetScrollBarVisible(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short nBar, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetSelectedItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetTreeLineColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetTreeLines(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeGetVersion(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **returnValue);"
   "\n",
   "long BKLib2__DBKTreeIsExpanded(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeIsNodeExist(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeMoveNode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyTargetNode, short nPosition, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeRefresh(CAObjHandle objectHandle, struct ERRORINFO *errorInfo);"
   "\n",
   "long BKLib2__DBKTreeRemoveColumn(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyCol, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeRemoveNode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeRenameNodeKey(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyNew, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeResetContent(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeSetAutoImages(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long BKLib2__DBKTreeSetBackColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long newValue);"
   "\n",
   "long BKLib2__DBKTreeSetBackTextColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefAutoImages(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefBackColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefBackTextColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefColumnHeadingVisible(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefColumnResizing(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefDragIcon(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefDragMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefEditable(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefEnableDragAndDrop(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefEnableEventModify(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefEnableEventMouseOverCell(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefEnableFocusCell(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefEnableSelection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefEnableTreeKeyDirection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefFont(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefForeTextColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefGridLineColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefGridLines(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefImageList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefListMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefSelectedItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefTreeLineColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetByRefTreeLines(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetColumnHeadFontStyle(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyCol, short headStyle);"
   "\n",
   "long BKLib2__DBKTreeSetColumnHeadFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyCol, short headFormat);"
   "\n",
   "long BKLib2__DBKTreeSetColumnHeadingVisible(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long BKLib2__DBKTreeSetColumnName(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyCol, const char *name, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeSetColumnResizing(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long BKLib2__DBKTreeSetColumnWidth(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyCol, long nWidth, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeSetDragIcon(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long BKLib2__DBKTreeSetDragMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long BKLib2__DBKTreeSetEditable(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long BKLib2__DBKTreeSetEnableDragAndDrop(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long BKLib2__DBKTreeSetEnableEventModify(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long BKLib2__DBKTreeSetEnableEventMouseOverCell(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long BKLib2__DBKTreeSetEnableFocusCell(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long BKLib2__DBKTreeSetEnableSelection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long BKLib2__DBKTreeSetEnableTreeKeyDirection(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long BKLib2__DBKTreeSetFont(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle newValue);"
   "\n",
   "long BKLib2__DBKTreeSetForeTextColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long newValue);"
   "\n",
   "long BKLib2__DBKTreeSetFrameBorder(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, long nNewStyle, long nNewStyleEx);"
   "\n",
   "long BKLib2__DBKTreeSetGridLineColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long newValue);"
   "\n",
   "long BKLib2__DBKTreeSetGridLines(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long BKLib2__DBKTreeSetImageList(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, CAObjHandle newValue);"
   "\n",
   "long BKLib2__DBKTreeSetListMode(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long BKLib2__DBKTreeSetNodeData(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, long lData);"
   "\n",
   "long BKLib2__DBKTreeSetNodeFontStyle(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, short nodeStyle);"
   "\n",
   "long BKLib2__DBKTreeSetNodeItemBackColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, unsigned long nNewValue);"
   "\n",
   "long BKLib2__DBKTreeSetNodeItemData(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, long lData);"
   "\n",
   "long BKLib2__DBKTreeSetNodeItemEditable(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, short bEditable);"
   "\n",
   "long BKLib2__DBKTreeSetNodeItemFontStyle(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, short nodeStyle);"
   "\n",
   "long BKLib2__DBKTreeSetNodeItemFormat(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, short nodeFormat);"
   "\n",
   "long BKLib2__DBKTreeSetNodeItemImage(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, short nImage);"
   "\n",
   "long BKLib2__DBKTreeSetNodeItemText(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, const char *text, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeSetNodeItemTextColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, unsigned long nNewValue);"
   "\n",
   "long BKLib2__DBKTreeSetNodeItemTextEx(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, const char *text, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeSetNodeItemTipTextEnable(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *keyNode, const char *keyCol, short bEnable);"
   "\n",
   "long BKLib2__DBKTreeSetPopupMenu(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *menuItems, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeSetRedraw(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short bRedraw, short *returnValue);"
   "\n",
   "long BKLib2__DBKTreeSetScrollBarVisible(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short nBar, short nNewValue);"
   "\n",
   "long BKLib2__DBKTreeSetSelectedItem(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *newValue);"
   "\n",
   "long BKLib2__DBKTreeSetTreeLineColor(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, unsigned long newValue);"
   "\n",
   "long BKLib2__DBKTreeSetTreeLines(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, short newValue);"
   "\n",
   "long BKLib2__DBKTreeToArray(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, struct tagVARIANT *returnValue);"
   "\n",
   "long BKLib2__DBKTreeToString(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *chSeparator, const char *chLine, char **returnValue);"
   "\n",
   "long BKLib2__DBKTreeToString2(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, const char *chSeparator, const char *chLine, char **returnValue);"
   "\n",
   "long BKLib2__DBKTreeToXML(CAObjHandle objectHandle, struct ERRORINFO *errorInfo, char **returnValue);"
   "\n",
   "void DiscardUIObjectsForDLL();"
   "\n",
   "int DllEntryPoint(struct HINSTANCE__ *hinstDLL, unsigned long fdwReason, void *lpvReserved);"
   "\n",
   "int DllMain(struct HINSTANCE__ *hinstDLL, unsigned long fdwReason, void *lpvReserved);"
   "\n",
   "struct _SElException *PLUGIN_SHUTDOWN_NAME_CODE(struct _SPluginArgs *a_pPluginArgs) __declspec(dllexport);"
   "\n",
   "struct _SElException *ThreadStart(unsigned long (*pThreadFnc)(void *) __attribute__((stdcall)), void *pData, HANDLE *hThread, HANDLE *hStopEvent);"
   "\n",
   "struct _SElException *ThreadStatus(HANDLE hThread, unsigned int timeout, int *pStatus);"
   "\n",
   "struct _SElException *ThreadStop(HANDLE *hThread, HANDLE *hStopEvent);"
   "\n",
   "void elexception_delete(struct _SElException **pException);"
   "\n",
   "void elexception_log_set(void (*fn_log)(struct _SElException *));"
   "\n",
   "struct _SElException *elexception_new(int errorCode, const char *messsage, const char *file, long line);"
   "\n",
   "struct _SElException *elstring_delete(struct _SELString **pString);"
   "\n",
   "struct _SElException *elstring_new(const char *pStr, struct _SELString **pString);"
   "\n",
   "void excdisplay(struct _SElException *pException);"
   "\n",
   "void excdispstr(struct _SElException *pException, char *str, int str_size);"
   "\n",
   "struct _SElException *pluginGetAttribute(unsigned int attrID, unsigned int size, void *value) __declspec(dllexport);"
   "\n",
   "struct _SElException *pluginGetInfo(struct _SPluginInfo **a_pInfo) __declspec(dllexport);"
   "\n",
   "struct _SElException *pluginInitialize(struct _SPluginArgs *a_pPluginArgs) __declspec(dllexport);"
   "\n",
   "struct _SElException *pluginLeave(struct _SPluginArgs *a_pPluginArgs, const char *uuid) __declspec(dllexport);"
   "\n",
   "struct _SElException *pluginRun(struct _SPluginArgs *a_pPluginArgs, const char *uuid) __declspec(dllexport);"
   "\n",
   "\0"
}
